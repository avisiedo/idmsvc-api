# Message schema for todo_created event
---
$schema: "http://json-schema.org/draft-07/schema"
title: Event Todo created
description: Message schema for todo creation event
type: object
additionalProperties: false
properties:
  id:
    description: |
      The id of the Todo resource.
    type: number
    format: int
    minValue: 0
    maxValue: 2147483647
  title:
    description: The Todo title
    type: string
    maxLength: 256
    # TODO Pattern is not implemented for the code generator leveraged
    #      pattern field is according to the ECMA-262 regular expression dialect
    #      (https://262.ecma-international.org/13.0/#sec-regexp-regular-expression-objects)
    #      however golang use the syntax accepted by RE2 (https://pkg.go.dev/regexp
    #      https://github.com/google/re2/wiki/Syntax)
    #      The json schema documentation recommend to use only a ubset of the regexp:
    #      https://json-schema.org/understanding-json-schema/reference/regular_expressions.html
    # TODO add format: regex and the pattern to be matched
    # format: regex
    # pattern: |
    #   `^(?P<origin>(?P<protocol>http[s]?:)?\/\/(?P<host>[a-z0-9A-Z-_.]+))(?P<port>:\d+)?(?P<path>[\/a-zA-Z0-9-\.]+)?(?P<search>\?[^#\n]+)?(?P<hash>#.*)?$`gm
    # https://regex101.com/r/kE6aO8/1
    # pattern: |
    #   /^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,}))\.?)(?::\d{2,5})?(?:[/?#]\S*)?$/i
  description:
    description: The Todo description
    type: string
    maxLength: 4096
required:
  - id
  - title
  - description
